android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "sviolet.demoa"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode Integer.valueOf(version_projectVersionCode)
        versionName version_projectVersionName

        //true:多dex允许,突破类65535的限制
        multiDexEnabled true

        ndk {
            //使得APK中只包含指定版本的so库
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    buildTypes {
        release {
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            //调试
            debuggable false
            //移除无用resource
            shrinkResources false
            //proguard配置文件proguard-rules.pro
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //自定义参数, 程序中BuildConfig._DEBUG获得
            buildConfigField "boolean", "_DEBUG", "false"
        }
        debug {
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled false
            //调试
            debuggable true
            //移除无用resource
            shrinkResources false
            //proguard配置文件proguard-rules.pro
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //自定义参数, 程序中BuildConfig._DEBUG获得
            buildConfigField "boolean", "_DEBUG", "true"
        }
    }

    sourceSets {
        main {
            //指定JNI的so库路径
            jniLibs.srcDirs = ['libs']
        }
    }

    dexOptions {
        //dex编译的最大内存(2g/4g, 4g会较快)
        javaMaxHeapSize "2g"
        preDexLibraries = false
        //设置单Dex最大方法数, 一般情况下设置40000, 此处为了测试, 设置了10000
        additionalParameters = ['--multi-dex',
                                '--set-max-idx-number=10000']
    }

    //多渠道打包///////////////////////////////////////////////////////////////////
    //左侧工具栏--BuildVariants, 可配置调试时的flavor类型

    //flavor维度, 使得productFlavors具有多个维度, 例如:发布渠道, 测试/生产环境
//    flavorDimensions "channel", "environment"

    //flavor配置
//    productFlavors {
//        google {//谷歌市场
//            flavorDimension "channel"
//            buildConfigField 'String', 'CHANNEL', '"谷歌市场版"'
//        }
//        wandoujia {//豌豆荚市场
//            flavorDimension "channel"
//            buildConfigField 'String', 'CHANNEL', '"豌豆荚市场版"'
//        }
//        prod {//生产环境
//            flavorDimension "environment"
//            manifestPlaceholders = [APP_NAME: "demoa"]//生产应用名(在Manifest中用${APP_NAME}取值)
//            applicationId "sviolet.demoa"//生产包名
//            buildConfigField 'String', 'URL', '"https://github.com/shepherdviolet/"'//生产URL
//        }
//        dev {//开发环境
//            flavorDimension "environment"
//            manifestPlaceholders = [APP_NAME: "demoa-test"]//测试应用名(在Manifest中用${APP_NAME}取值)
//            applicationId "sviolet.demoa.test"//测试包名
//            buildConfigField 'String', 'URL', '"https://github.com/shepherdviolet/test"'//测试URL
//        }
//    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')//这个配置会自动在混淆时引入Jar包, 不要在proguard-rules.pro中配置-libraryjars, 否则会报错!
    compile project(':turquoise') { group 'com.github.shepherdviolet.turquoise'; version upload_mavenVersion }//指定groupId和version, artifactId为project名
    compile project(':turquoise-multidex') { group 'com.github.shepherdviolet.turquoise'; version upload_mavenVersion }//指定groupId和version, artifactId为project名
}
